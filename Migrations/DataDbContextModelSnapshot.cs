// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using jobPortalAPI.Data;

#nullable disable

namespace jobPortalAPI.Migrations
{
    [DbContext(typeof(DataDbContext))]
    partial class DataDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("jobPortalAPI.Data.Entities.ApplicantDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FileType")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicantDocument");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.ApplicantLogo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FileType")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicantLogo");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("CompanyBusinessId")
                        .HasColumnType("text");

                    b.Property<Guid?>("CompanyDocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyLogoId")
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyUrl")
                        .HasColumnType("text");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProfileDescription")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyDocumentId");

                    b.HasIndex("CompanyLogoId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.CompanyAdditionalUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyAdditionalUsers");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.CompanyDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FileType")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CompanyDocument");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.CompanyLogo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FileType")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CompanyLogo");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.JobPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CampaignType")
                        .HasColumnType("text");

                    b.Property<string>("CompanyBrandName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyBusinessId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyDescription")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyPageUrl")
                        .HasColumnType("text");

                    b.Property<string>("ComputerSkills")
                        .HasColumnType("text");

                    b.Property<string>("ComputerSkillsMoreInfo")
                        .HasColumnType("text");

                    b.Property<string>("ContactMember")
                        .HasColumnType("text");

                    b.Property<string>("ContactMemberJob")
                        .HasColumnType("text");

                    b.Property<string>("DateOfApplication")
                        .HasColumnType("text");

                    b.Property<string>("DurationOfEmployment")
                        .HasColumnType("text");

                    b.Property<string>("DurationOfEmploymentMoreInfo")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("InfoAboutLoad")
                        .HasColumnType("text");

                    b.Property<int>("IsNightShift")
                        .HasColumnType("integer");

                    b.Property<int>("IsOpenedService")
                        .HasColumnType("integer");

                    b.Property<int>("IsPartPlace")
                        .HasColumnType("integer");

                    b.Property<int>("IsPermanentPlace")
                        .HasColumnType("integer");

                    b.Property<int>("IsRemotelyWork")
                        .HasColumnType("integer");

                    b.Property<int>("IsShift")
                        .HasColumnType("integer");

                    b.Property<string>("JobDescription")
                        .HasColumnType("text");

                    b.Property<string>("JobName")
                        .HasColumnType("text");

                    b.Property<int?>("JobPostAddressId")
                        .HasColumnType("integer");

                    b.Property<int>("JobPostCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("JobPostNumber")
                        .HasColumnType("text");

                    b.Property<int?>("JobPostTooleasumineId")
                        .HasColumnType("integer");

                    b.Property<string>("LevelOfEducation")
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("MoreInfo")
                        .HasColumnType("text");

                    b.Property<int>("OneLanguageWillBeAccepted")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int>("PlaceCount")
                        .HasColumnType("integer");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("SalaryMoreInfo")
                        .HasColumnType("text");

                    b.Property<string>("TitleSpecification")
                        .HasColumnType("text");

                    b.Property<int>("TotalApplicants")
                        .HasColumnType("integer");

                    b.Property<int>("TotalLikes")
                        .HasColumnType("integer");

                    b.Property<int>("TotalViewed")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<string>("UrlToApplyJob")
                        .HasColumnType("text");

                    b.Property<string>("WeOffer")
                        .HasColumnType("text");

                    b.Property<string>("WorkExperience")
                        .HasColumnType("text");

                    b.Property<int?>("WorkingSalaryMax")
                        .HasColumnType("integer");

                    b.Property<int?>("WorkingSalaryMin")
                        .HasColumnType("integer");

                    b.Property<string>("WorkingTime")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobPostAddressId");

                    b.HasIndex("JobPostCategoryId");

                    b.HasIndex("JobPostTooleasumineId");

                    b.ToTable("JobPost");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.JobPostAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AddressId")
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<string>("CountryName")
                        .HasColumnType("text");

                    b.Property<string>("MoreInfo")
                        .HasColumnType("text");

                    b.Property<string>("ObjectId")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("JobPostAddress");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.JobPostAmetitunnistus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("JobPostId")
                        .HasColumnType("uuid");

                    b.Property<string>("Professional")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.ToTable("JobPostAmetitunnistus");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.JobPostAsukohaAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AddressId")
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<string>("CountryName")
                        .HasColumnType("text");

                    b.Property<Guid?>("JobPostId")
                        .HasColumnType("uuid");

                    b.Property<string>("MoreInfo")
                        .HasColumnType("text");

                    b.Property<string>("ObjectId")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.ToTable("JobPostAsukohaAddress");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.JobPostCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EeType")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("JobPostCategory");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.JobPostDocuments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Document")
                        .HasColumnType("text");

                    b.Property<Guid?>("JobPostId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.ToTable("JobPostDocuments");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.JobPostHaridus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AreaInCountry")
                        .HasColumnType("text");

                    b.Property<Guid?>("JobPostId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.ToTable("JobPostHaridus");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.JobPostJuhiluba", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<Guid?>("JobPostId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.ToTable("JobPostJuhiluba");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.JobPostKeeleoskus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("IsRequired")
                        .HasColumnType("integer");

                    b.Property<Guid?>("JobPostId")
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("Speaking")
                        .HasColumnType("text");

                    b.Property<string>("Writing")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.ToTable("JobPostKeeleoskus");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.JobPostKutsetunnistused", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("JobPostId")
                        .HasColumnType("uuid");

                    b.Property<string>("Professional")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.ToTable("JobPostKutsetunnistus");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.JobPostTooleasumine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Day")
                        .HasColumnType("integer");

                    b.Property<int>("IsFastRequired")
                        .HasColumnType("integer");

                    b.Property<int?>("Month")
                        .HasColumnType("integer");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("JobPostTooleasumine");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("EmailUnsubscribe")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.Company", b =>
                {
                    b.HasOne("jobPortalAPI.Data.Entities.CompanyDocument", "CompanyDocument")
                        .WithMany()
                        .HasForeignKey("CompanyDocumentId");

                    b.HasOne("jobPortalAPI.Data.Entities.CompanyLogo", "CompanyLogo")
                        .WithMany()
                        .HasForeignKey("CompanyLogoId");

                    b.Navigation("CompanyDocument");

                    b.Navigation("CompanyLogo");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.CompanyAdditionalUsers", b =>
                {
                    b.HasOne("jobPortalAPI.Data.Entities.Company", "Company")
                        .WithMany("CompanyAdditionalUsers")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.JobPost", b =>
                {
                    b.HasOne("jobPortalAPI.Data.Entities.JobPostAddress", "JobPostAddress")
                        .WithMany()
                        .HasForeignKey("JobPostAddressId");

                    b.HasOne("jobPortalAPI.Data.Entities.JobPostCategory", "JobPostCategory")
                        .WithMany()
                        .HasForeignKey("JobPostCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("jobPortalAPI.Data.Entities.JobPostTooleasumine", "JobPostTooleasumine")
                        .WithMany()
                        .HasForeignKey("JobPostTooleasumineId");

                    b.Navigation("JobPostAddress");

                    b.Navigation("JobPostCategory");

                    b.Navigation("JobPostTooleasumine");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.JobPostAmetitunnistus", b =>
                {
                    b.HasOne("jobPortalAPI.Data.Entities.JobPost", "JobPost")
                        .WithMany("JobPostAmetitunnistus")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("JobPost");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.JobPostAsukohaAddress", b =>
                {
                    b.HasOne("jobPortalAPI.Data.Entities.JobPost", "JobPost")
                        .WithMany("JobPostAsukohaAddress")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("JobPost");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.JobPostDocuments", b =>
                {
                    b.HasOne("jobPortalAPI.Data.Entities.JobPost", "JobPost")
                        .WithMany("JobPostDocuments")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("JobPost");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.JobPostHaridus", b =>
                {
                    b.HasOne("jobPortalAPI.Data.Entities.JobPost", "JobPost")
                        .WithMany("JobPostHaridus")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("JobPost");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.JobPostJuhiluba", b =>
                {
                    b.HasOne("jobPortalAPI.Data.Entities.JobPost", "JobPost")
                        .WithMany("JobPostJuhiluba")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("JobPost");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.JobPostKeeleoskus", b =>
                {
                    b.HasOne("jobPortalAPI.Data.Entities.JobPost", "JobPost")
                        .WithMany("JobPostKeeleoskus")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("JobPost");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.JobPostKutsetunnistused", b =>
                {
                    b.HasOne("jobPortalAPI.Data.Entities.JobPost", "JobPost")
                        .WithMany("JobPostKutsetunnistused")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("JobPost");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.User", b =>
                {
                    b.HasOne("jobPortalAPI.Data.Entities.Company", "Company")
                        .WithOne("User")
                        .HasForeignKey("jobPortalAPI.Data.Entities.User", "CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("jobPortalAPI.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("jobPortalAPI.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("jobPortalAPI.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("jobPortalAPI.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.Company", b =>
                {
                    b.Navigation("CompanyAdditionalUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("jobPortalAPI.Data.Entities.JobPost", b =>
                {
                    b.Navigation("JobPostAmetitunnistus");

                    b.Navigation("JobPostAsukohaAddress");

                    b.Navigation("JobPostDocuments");

                    b.Navigation("JobPostHaridus");

                    b.Navigation("JobPostJuhiluba");

                    b.Navigation("JobPostKeeleoskus");

                    b.Navigation("JobPostKutsetunnistused");
                });
#pragma warning restore 612, 618
        }
    }
}
